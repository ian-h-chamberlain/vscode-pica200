$schema: "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json"
name: "Pica200"
scopeName: "source.pica200"

# NOTE: this $comment applies to the generated JSON, not this file
$comment: "DO NOT EDIT! @generated from pica.tmLanguage.yaml"

patterns:
  - include: '#comment'
  - include: '#label'
  - include: '#directive'
  - include: '#opcode'
  - include: '#register'
  - include: '#alias_declaration'
  - include: '#constant'

  # TODO:
  #   - proc/entry names as "functions"
  #   - operands for cmp (eq, ne, etc.)
  #   - boolean/bitwise operators (&&, ||, !, etc)
  #   - int operators (+, -, *, / etc.)
  #   - swizzling?

repository:
  comment:
    patterns:
      - name: comment.line.semicolon.pica
        match: ';.*$'

  directive:
    patterns:
    - name: keyword.control.directive.pica
      match: '(?:^|\s)[.](proc|else|end|[fi]vec|bool|const(fa?|i)|entry|nodevle|gsh|set[fib])\b'

  opcode:
    patterns:
    - name: keyword.operator.opcode.pica
      match: '\b(?<![.])(nop|end|emit|setemit|add|dp[34h]|dst|mul|sge|slt|max|min|ex2|lg2|litp|flr|rcp|rsq|mova?|cmp|call[cu]?|for|breakc?|if[cu]|jmp[cu]|mad)\b'

  # TODO: maybe try entity or something to get special highlighting?
  label:
    patterns:
      - name: variable.other.label.pica
        match: '^\s*(\S+:)'
        patterns:
          - include: '#identifier'

  # TODO: want to use 'storage' class, or have different classes for different register types?
  # Like input registers could be 'parameter' but output registers something else?
  # Also, do we want `support.variable` or `parameter`?
  # Maybe `.in` / `.alias` declares a parameter, general-purpose registers can be either
  # `storage` or `support`? Can we highlight `.out` somehow?
  register:
    patterns:
      - name: support.variable.register.pica
        match: '\b([bvor]([0-9]|1[0-5])|c([0-8][0-9]?|9[0-5]?)|i[0-3]|a(01|[01L]))\b'

  identifier:
    patterns:
      - match: '[a-zA-Z0-9_$]+'

  alias_declaration:
    patterns:
      - match: '(?:^|\s)([.]alias)\s+(\S+)\s+(\S+)\b'
        captures:
          '1':
            name: keyword.control.directive.alias.pica
          '2':
            patterns:
              - include: '#identifier'
                name: variable.other.alias.pica
          '3':
            patterns:
              - include: '#register'
      - match: '(?:^|\s)([.]in)\s+(\S+)(?:\s+(\S+))?\b'
        captures:
          '1':
            name: keyword.control.directive.in.pica
          '2':
            patterns:
              - include: '#identifier'
                name: variable.parameter.alias.in.pica
          '3':
            patterns:
              - include: '#register'
      - match: '(?:^|\s)([.]out)\s+(\S+)\s+(\S+)(?:\s+(\S+))?(?:\s+(\S+))?\b'
        captures:
          '1':
            name: keyword.control.directive.out.pica
          '2':
            patterns:
              - match: '-'
                name: variable.language.out.noalias.pica
              - match: '[^-]+'
                name: variable.parameter.alias.out.pica
                # include: '#identifier'
          '3':
            patterns:
              - match: 'pos(ition)?|normalquat|nquat|color|clr|t(ex)?coord(0w?|[12])|view|dummy'
                name: support.type.property-name.out.pica
          '4':
            patterns:
              - include: '#register'

  constant:
    patterns:
      - name: constant.numeric.float.pica
        match: '\b(-?[0-9]+[.][0-9]+)\b'
      - name: constant.numeric.int.pica
        match: '\b(-?[0-9]+)\b'
